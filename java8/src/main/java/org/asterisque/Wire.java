/*
 * Copyright (c) 2014 koiroha.org.
 * All sources and related resources are available under Apache License 2.0.
 * http://www.apache.org/licenses/LICENSE-2.0.html
*/
package org.asterisque;

import javax.net.ssl.SSLSession;
import java.util.Optional;

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Wire
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * メッセージの伝達ラインを表すインターフェースです。TCP 接続における非同期 Socket に相当し、Wire のクローズは
 * TCP 接続のクローズを意味します。
 *
 * メッセージのキュー/バッファリング、back pressure 等のフロー制御、再接続の処理は上位層で行われます。
 *
 * @author Takami Torao
 */
public interface Wire extends AutoCloseable {

	public LocalNode getLocalNode();
	public RemoteNode getRemoteNode();
	public boolean isServer();

	// ==============================================================================================
	// メッセージ入出力の設定
	// ==============================================================================================
	/**
	 * この Wire が使用するメッセージ送受信のための機能やクローズのコールバックを設定します。
	 *
	 * @param stub スタブ
	 */
	public void setStub(Stub stub);

	// ==============================================================================================
	// 出力可能設定
	// ==============================================================================================
	/**
	 * スタブの {@link org.asterisque.Wire.Stub#produce()} が送信可能なメッセージを取り出し可能/不可の間で
	 * 状態が切り替わった時に呼び出されます。サブクラスはこのメソッドをオーバーライドして下層の通信実装から
	 * {@link java.nio.channels.SelectionKey#OP_WRITE} のような出力可能の通知設定を制御することが出来ます。
	 *
	 * サブクラスはデフォルトで enable = false の状態を持ちます。
	 *
	 * @param writable スタブに送信可能なメッセージが発生した場合
	 */
	public void setWritable(boolean writable);

	// ==============================================================================================
	// 入力可能設定
	// ==============================================================================================
	/**
	 * スタブの {@link Stub#consume(Message)} が管理するキューの状態に対してメッセージを受け
	 * 取れる/受け取れない状態が切り替わったときに呼び出されます。
	 *
	 * サブクラスはデフォルトで enable = false の状態を持ちます。
	 *
	 * @param readable スタブがメッセージを受け取れるようになったとき true
	 */
	public void setReadable(boolean readable);

	// ==============================================================================================
	// ピア証明書の参照
	// ==============================================================================================
	/**
	 * この Wire の通信相手の証明書セッションを参照します。ピアが承認されていなければ Optional.empty() を返します。
	 * @return この通信の SSL セッション
	 */
	public Optional<SSLSession> getSSLSession();

	// ==============================================================================================
	// クローズ
	// ==============================================================================================
	/**
	 * この Wire をクローズし使用していたリソースを解放します。
	 */
	public void close();

	// ==============================================================================================
	// インスタンスの文字列化
	// ==============================================================================================
	/**
	 * この Wire の接続先情報を人が読む目的の文字列として参照します。
	 * @return この Wire の接続情報
	 */
	public String toString();

	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// Stub
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	/**
	 * Wire に対するイベントハンドラのインターフェースです。
	 */
	public interface Stub {

		// ============================================================================================
		// 送信メッセージの取り出し
		// ============================================================================================
		/**
		 * Wire が送信可能な状態になったときに次の送信対象メッセージを取り出します。
		 * @return Wire が送信するメッセージ
		 */
		public Message produce();

		// ============================================================================================
		// 受信メッセージの引き渡し
		// ============================================================================================
		/**
		 * Wire から受信したメッセージを受け取ります。。
		 * @param msg Wire が受信したメッセージ
		 */
		public void consume(Message msg);

		// ============================================================================================
		// クローズ
		// ============================================================================================
		/**
		 * Wire がクローズされたときに呼び出されます。
		 */
		public void close();
	}
}
