/*
 * Copyright (c) 2014 koiroha.org.
 * All sources and related resources are available under Apache License 2.0.
 * http://www.apache.org/licenses/LICENSE-2.0.html
*/
package org.asterisque;

import io.asterisque.Asterisque;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Block
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * パイプ間でやり取りされるメッセージです。
 *
 * @author Takami Torao
 */
public final class Block extends Message {

	// ==============================================================================================
	// 最大ペイロードサイズ
	// ==============================================================================================
	/**
	 * ペイロードに設定できる最大サイズです。0xEFFF (61,439バイト) を表します。
	 */
	public static int MaxPayloadSize = 0xFFFF - (4 * 1024);

	// ==============================================================================================
	// データ
	// ==============================================================================================
	/**
	 * このブロックが転送するデータです。
	 */
	public final byte[] payload;

	// ==============================================================================================
	// オフセット
	// ==============================================================================================
	/**
	 * バッファ内で有効なデータの開始位置を表すオフセットです。
	 */
	public final int offset;

	// ==============================================================================================
	// 長さ
	// ==============================================================================================
	/**
	 * バッファ内で有効なデータの長さを表す値です。
	 */
	public final int length;

	// ==============================================================================================
	// EOF
	// ==============================================================================================
	/**
	 * このブロックが EOF を表すかを示すフラグです。
	 */
	public final boolean eof;

	// ==============================================================================================
	// コンストラクタ
	// ==============================================================================================
	/**
	 * Block メッセージを構築します。
	 * {@link #MaxPayloadSize} より大きいペイロードを指定すると例外が発生します。
	 */
	private Block(short pipeId, byte[] payload, int offset, int length, boolean eof){
		super(pipeId);
		if(payload == null){
			throw new NullPointerException("payload is null");
		}
		if(offset + length > payload.length){
			throw new IllegalArgumentException("buffer overrun: offset=" + offset + ", length=" + length + ", actual=" + payload.length);
		}
		if(offset < 0 || length < 0){
			throw new IllegalArgumentException("negative value: offset=" + offset + ", length=" + length);
		}
		if(length > MaxPayloadSize){
			throw new IllegalArgumentException("too long payload: " + length + ", max=" + MaxPayloadSize);
		}
		this.payload = payload;
		this.offset = offset;
		this.length = length;
		this.eof = eof;
	}

	// ==============================================================================================
	// コンストラクタ
	// ==============================================================================================
	/**
	 * Block メッセージを構築します。
	 */
	public Block(short pipeId, byte[] payload, int offset, int length){
		this(pipeId, payload, offset, length, false);
	}

	// ==============================================================================================
	// コンストラクタ
	// ==============================================================================================
	/**
	 * Block メッセージを構築します。
	 */
	public Block(short pipeId, byte[] payload){
		this(pipeId, payload, 0, payload.length, false);
	}

	// ==============================================================================================
	// ByteBuffer の参照
	// ==============================================================================================
	/**
	 * このブロックのペイロードを ByteBuffer として参照します。
	 */
	public ByteBuffer toByteBuffer(){
		return ByteBuffer.wrap(payload, offset, length);
	}

	// ==============================================================================================
	// 文字列の参照
	// ==============================================================================================
	/**
	 * このブロックのペイロードを UTF-8 でエンコードされた文字列として参照します。
	 */
	public String getString(){
		return getString(Asterisque.UTF8);
	}

	// ==============================================================================================
	// 文字列の参照
	// ==============================================================================================
	/**
	 * このブロックのペイロードを指定された文字セットでエンコードされた文字列として参照します。
	 */
	public String getString(Charset charset){
		return new String(payload, offset, length, charset);
	}

	// ==============================================================================================
	// インスタンスの文字列化
	// ==============================================================================================
	/**
	 * このインスタンスを文字列化します。
	 */
	@Override
	public String toString(){
		if(eof){
			return "Block(EOF)";
		}
		StringBuilder buffer = new StringBuilder(length * 3);
		for(int i=0; i<length; i++){
			if(i != 0){
				buffer.append(",");
			}
			buffer.append(String.format("%02X", payload[offset + i]));
		}
		return "Block(" + pipeId + ",[" + buffer + "])";
	}

	// ==============================================================================================
	// EOF ブロックの構築
	// ==============================================================================================
	/**
	 * 指定されたパイプ ID に対する EOF ブロックを構築します。
	 */
	public static Block eof(short pipeId){
		return new Block(pipeId, Empty, 0, 0, true);
	}

	// ==============================================================================================
	// 空ペイロード
	// ==============================================================================================
	/**
	 * 空のペイロードを Singleton で扱うためのバイト配列です。
	 */
	public static final byte[] Empty = new byte[0];

}
