/*
 * Copyright (c) 2014 koiroha.org.
 * All sources and related resources are available under Apache License 2.0.
 * http://www.apache.org/licenses/LICENSE-2.0.html
*/
package org.asterisque.msg;

import org.asterisque.Debug;

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Close
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * パイプのクローズを示すメッセージです。
 * {@code result} もしくは {@code abort} のどちらかが有効な値を持ちます。
 *
 * @author Takami Torao
 */
public final class Close extends Message {

	// ==============================================================================================
	// 結果
	// ==============================================================================================
	/**
	 * 処理が正常に終了した場合の結果です。
	 * Optional が null 値を保持できないため null 可能な Object 型の変数を使用しています。
	 */
	public final Object result;

	// ==============================================================================================
	// 中断
	// ==============================================================================================
	/**
	 * 中断によって処理が終了したことを示す値です。
	 * Optional は Serializable ではないため null 可能な Object 型の参照を使用しています。
	 */
	public final Abort abort;

	// ==============================================================================================
	// コンストラクタ
	// ==============================================================================================
	/**
	 * 処理成功の Close メッセージを構築します。
	 */
	public Close(short pipeId, Object result){
		super(pipeId);
		this.result = result;
		this.abort = null;
	}

	// ==============================================================================================
	// コンストラクタ
	// ==============================================================================================
	/**
	 * 処理中断の Close メッセージを構築します。
	 */
	public Close(short pipeId, Abort abort){
		super(pipeId);
		this.result = null;
		this.abort = abort;
		assert(abort != null);
	}

	// ==============================================================================================
	// インスタンスの文字列化
	// ==============================================================================================
	/**
	 * このインスタンスを文字列化します。
	 */
	@Override
	public String toString(){
		if(abort == null){
			return "Close(" + pipeId + "," + Debug.toString(result) + ")";
		} else {
			return "Close(" + pipeId + "," + abort + ")";
		}
	}

	// ==============================================================================================
	// 例外による終了
	// ==============================================================================================
	/**
	 * 予期しない状態によってパイプを終了するときのクローズメッセージを作成します。
	 */
	public static Close unexpectedError(short pipeId, String msg){
		return new Close(pipeId, new Abort(Abort.Unexpected, msg));
	}

}
