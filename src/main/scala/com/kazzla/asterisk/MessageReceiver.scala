/*
 * Copyright (c) 2014 koiroha.org.
 * All sources and related resources are available under Apache License 2.0.
 * http://www.apache.org/licenses/LICENSE-2.0.html
*/
package com.kazzla.asterisk

import java.lang.reflect.Method
import org.slf4j.LoggerFactory

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// MessageReceiver
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * @author Takami Torao
 */
trait MessageReceiver {

	// ============================================================================================
	// メッセージの受信通知
	// ============================================================================================
	/**
	 * パイプに対する任意のメッセージ受信のコールバックを受けるための部分関数を実装します。
	 * このメソッドはメッセージの順序性を保証するために単一スレッドで呼び出されます。従ってメソッド内で時間のかかる
	 * 処理を行うとスレッドプールを共有するすべてのセッションの処理が停止します。
	 * メソッド内からは `Session()`, `Pipe()` を使用してそれぞれこの呼び出しを行っているセッションとパイプに
	 * アクセスすることが出来ます。ただしこれらはメソッド内から呼び出した別スレッドには伝播しません。
	 * `Close` メッセージを受信した後は呼び出し後にフレームワークによってパイプがクローズされます。
	 */
	def receive:PartialFunction[Message,Unit]

}
