/*
 * Copyright (c) 2014 koiroha.org.
 * All sources and related resources are available under Apache License 2.0.
 * http://www.apache.org/licenses/LICENSE-2.0.html
*/
package org.asterisque.message;

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Abort
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import org.asterisque.Debug;

/**
 * 処理の中断状況を表すために {@link Close} に付加される情報です。
 *
 * @author Takami Torao
 */
public final class Abort extends Exception {

	public static final int Unexpected = -1;
	public static final int SessionClosing = -2;		// セッションがクローズ中

	// ==============================================================================================
	// 中断コード
	// ==============================================================================================
	/**
	 * この中断理由を受信側で識別するためのコード値です。
	 */
	public final int code;

	// ==============================================================================================
	// 中断メッセージ
	// ==============================================================================================
	/**
	 * この中断理由を人間が読める形式で表したメッセージです。
	 */
	public final String message;

	// ==============================================================================================
	// コンストラクタ
	// ==============================================================================================
	/**
	 * 中断コードとメッセージを指定して構築を行います。
	 */
	public Abort(int code, String message){
		super(code + ": " + message);
		if(message == null){
			throw new NullPointerException("message is null");
		}
		this.code = code;
		this.message = message;
	}

	// ==============================================================================================
	// インスタンスの文字列化
	// ==============================================================================================
	/**
	 * このインスタンスを文字列化します。
	 */
	@Override
	public String toString(){
		return "Abort(" + code + "," + Debug.toString(message) + ")";
	}

}
