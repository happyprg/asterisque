/*
 * Copyright (c) 2014 koiroha.org.
 * All sources and related resources are available under Apache License 2.0.
 * http://www.apache.org/licenses/LICENSE-2.0.html
*/
package org.asterisque;

import org.asterisque.msg.Message;

import javax.net.ssl.SSLSession;
import java.net.SocketAddress;
import java.util.Optional;

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Wire
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * メッセージの伝達ラインを表すインターフェースです。TCP 接続における非同期 Socket に相当し、Wire のクローズは
 * TCP 接続のクローズを意味します。
 *
 * メッセージのキュー/バッファリング、back pressure 等のフロー制御、再接続の処理は上位層で行われます。
 *
 * @author Takami Torao
 */
public interface Wire extends AutoCloseable {

	// ==============================================================================================
	// ローカルノードの参照
	// ==============================================================================================
	/**
	 * この Wire の {@link org.asterisque.LocalNode} を参照します。
	 */
	public LocalNode node();

	// ==============================================================================================
	// ローカルノードの参照
	// ==============================================================================================
	/**
	 * この Wire のローカル側アドレスを参照します。
	 */
	public SocketAddress local();

	// ==============================================================================================
	// リモートノードの参照
	// ==============================================================================================
	/**
	 * この Wire のリモート側アドレスを参照します。
	 */
	public SocketAddress remote();

	// ==============================================================================================
	// サーバ側判定
	// ==============================================================================================
	/**
	 * こちら側の端点が接続を受け付けた場合に true を返します。
	 * プロトコル上どちらが master でどちらが worker かの役割を決める必要がある場合に使用することができます。
	 */
	public boolean isServer();

	// ==============================================================================================
	// イベントハンドラの設定
	// ==============================================================================================
	/**
	 * この Wire のイベントハンドラを設定します。
	 */
	public void setPlug(Optional<Plug> plug);

	// ==============================================================================================
	// 出力可能設定
	// ==============================================================================================
	/**
	 * スタブの {@link org.asterisque.Wire.Plug#produce()} が送信可能なメッセージを取り出し可能/不可の間で
	 * 状態が変化した時に呼び出されます。サブクラスはこのメソッドをオーバーライドして下層の通信実装から
	 * {@link java.nio.channels.SelectionKey#OP_WRITE} のような出力可能の通知設定を制御することが出来ます。
	 *
	 * サブクラスはデフォルトで enable = false の状態を持ちます。
	 * supplier が設定されていない状態で writable を true に設定することは出来ません。
	 *
	 * @param writable スタブに送信可能なメッセージが発生した場合
	 */
	public void setWritable(boolean writable);

	// ==============================================================================================
	// 入力可能設定
	// ==============================================================================================
	/**
	 * スタブの {@link org.asterisque.Wire.Plug#consume(org.asterisque.msg.Message)} が管理するキューの状態に対してメッセージを受け
	 * 取れる/受け取れない状態が切り替わったときに呼び出されます。
	 *
	 * サブクラスはデフォルトで enable = false の状態を持ちます。
	 *
	 * @param readable スタブがメッセージを受け取れるようになったとき true
	 */
	public void setReadable(boolean readable);

	// ==============================================================================================
	// ピア証明書の参照
	// ==============================================================================================
	/**
	 * この Wire の通信相手の証明書セッションを参照します。ピアが承認されていなければ Optional.empty() を返します。
	 * @return この通信の SSL セッション
	 */
	public Optional<SSLSession> getSSLSession();

	// ==============================================================================================
	// クローズ
	// ==============================================================================================
	/**
	 * この Wire をクローズし使用していたリソースを解放します。
	 */
	public void close();

	// ==============================================================================================
	// インスタンスの文字列化
	// ==============================================================================================
	/**
	 * この Wire の接続先情報を人が読む目的の文字列として参照します。
	 * @return この Wire の接続情報
	 */
	public String toString();

	public interface Plug {
		/** Wire が書き込み可能になった時に次のメッセージを参照するための処理。 */
		public Message produce();
		/** Wire が読み込んだメッセージを渡す処理。 */
		public void consume(Message msg);
		/** Wire がクローズされたときに呼び出す処理。 */
		public void onClose(Wire wire);
	}

	public final class Priority {
		public static final byte Max = Byte.MAX_VALUE;
		public static final byte Min = Byte.MIN_VALUE;
		public static final byte Normal = 0;
		private Priority(){ }
		public static byte upper(byte value){ return (byte)Math.min(value + 1, Max); }
		public static byte lower(byte value){ return (byte)Math.max(value - 1, Min); }
	}

}
